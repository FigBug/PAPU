/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin editor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h"

//==============================================================================
PAPUAudioProcessorEditor::PAPUAudioProcessorEditor (PAPUAudioProcessor& p)
    : slAudioProcessorEditor (p), processor (p)
{
    additionalProgramming = "Shay Green";
    
    logo = ImageFileFormat::loadFrom (BinaryData::logo_png, BinaryData::logo_pngSize);
    
    for (slParameter* pp : p.getPluginParameters())
    {
        ParamComponent* c = pp->isOnOff() ? (ParamComponent*)new Switch (pp) : (ParamComponent*)new Knob (pp);
        
        addAndMakeVisible (c);
        controls.add (c);
    }
    
    addAndMakeVisible (&scopeL);
    addAndMakeVisible (&scopeR);
    
    setGridSize (10, 4);
    
    scopeL.setNumSamplesPerPixel (2);
    scopeL.setVerticalZoomFactor (3.0f);
    scopeR.setNumSamplesPerPixel (2);
    scopeR.setVerticalZoomFactor (3.0f);
}

PAPUAudioProcessorEditor::~PAPUAudioProcessorEditor()
{
}

//==============================================================================
void PAPUAudioProcessorEditor::paint (Graphics& g)
{
    slAudioProcessorEditor::paint (g);
        
    g.drawImageAt (logo, getWidth() / 2 - logo.getWidth() / 2, 0);
}

void PAPUAudioProcessorEditor::resized()
{
    using AP = PAPUAudioProcessor;
    
    slAudioProcessorEditor::resized();
    
    Rectangle<int> r = getControlsArea();

    int i = 0;
    for (auto* c : controls)
    {
        c->setBounds(getGridArea (i % 7, i / 7));
        i++;
    }
    
    scopeL.setBounds (getGridArea (6, 2, 2, 2).reduced (5));
    scopeR.setBounds (getGridArea (8, 2, 2, 2).reduced (5));
}
