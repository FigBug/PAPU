/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

const char* PAPUAudioProcessor::paramPulse1Level      = "pulse1Level";
const char* PAPUAudioProcessor::paramPulse2Level      = "pulse2Level";
const char* PAPUAudioProcessor::paramPulse3Level      = "pulse3Level";
const char* PAPUAudioProcessor::paramNoiseLevel       = "noiseLevel";
const char* PAPUAudioProcessor::paramNoiseWhite       = "noiseWhite";
const char* PAPUAudioProcessor::paramNoiseShift       = "noiseShift";

//==============================================================================
String percentTextFunction (const slParameter& p, float v)
{
    return String::formatted("%.0f%%", v / p.getUserRangeEnd() * 100);
}

String typeTextFunction (const slParameter& p, float v)
{
    return v > 0.0f ? "White" : "Periodic";
}


String speedTextFunction (const slParameter& p, float v)
{
    switch (int (v))
    {
        case 0: return "Fast";
        case 1: return "Medium";
        case 2: return "Slow";
        case 3: return "Tone 2";
    }
    return "";
}

//==============================================================================
PAPUAudioProcessor::PAPUAudioProcessor()
{
    addPluginParameter (new slParameter (paramPulse1Level,     "Pulse 1 Level",      "Pulse 1",     "", 0.0f, 1.0f,  0.0f, 1.0f, 1.0f, percentTextFunction));
    addPluginParameter (new slParameter (paramPulse2Level,     "Pulse 2 Level",      "Pulse 2",     "", 0.0f, 1.0f,  0.0f, 0.0f, 1.0f, percentTextFunction));
    addPluginParameter (new slParameter (paramPulse3Level,     "Pulse 3 Level",      "Pulse 3",     "", 0.0f, 1.0f,  0.0f, 0.0f, 1.0f, percentTextFunction));
    addPluginParameter (new slParameter (paramNoiseLevel,      "Noise Level",        "Noise",       "", 0.0f, 1.0f,  0.0f, 0.0f, 1.0f, percentTextFunction));
    addPluginParameter (new slParameter (paramNoiseWhite,      "Noise Type",         "Type",        "", 0.0f, 1.0f,  1.0f, 0.0f, 1.0f, typeTextFunction));
    addPluginParameter (new slParameter (paramNoiseShift,      "Noise Speed",        "Speed",       "", 0.0f, 3.0f,  1.0f, 0.0f, 1.0f, speedTextFunction));
}

PAPUAudioProcessor::~PAPUAudioProcessor()
{
}

//==============================================================================
void PAPUAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    outputSmoothed.reset (sampleRate, 0.05);
/*
    buf.sample_rate (sampleRate);
    buf.clock_rate (clocks_per_sec);
    
  
    apu.output (buf.center(), buf.left(), buf.right());
 */
}

void PAPUAudioProcessor::releaseResources()
{
}

void PAPUAudioProcessor::runUntil (int& done, AudioSampleBuffer& buffer, int pos)
{
    int todo = jmin (pos, buffer.getNumSamples()) - done;
    /*
    while (todo > 0)
    {
        if (buf.samples_avail() > 0)
        {
            blip_sample_t out[1024];
            
            int count = buf.read_samples (out, jmin (todo, 1024 / 2, (int) buf.samples_avail()));
        
            float* data = buffer.getWritePointer (0, done);
            for (int i = 0; i < count; i++)
                data[i] = (out[i * 2] + out[i * 2 + 1]) / 2.0f / 32768.0f;
        
            done += count;
            todo -= count;
        }
        else
        {
            apu.end_frame (1024);
            buf.end_frame (1024);
        }
    }*/
}

void PAPUAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midi)
{
    const float p1Level = getParameter (paramPulse1Level)->getUserValue();
    const float p2Level = getParameter (paramPulse2Level)->getUserValue();
    const float p3Level = getParameter (paramPulse3Level)->getUserValue();
    const float nLevel  = getParameter (paramNoiseLevel)->getUserValue();
    const bool nWhite   = getParameter (paramNoiseWhite)->getUserValue() > 0.0f;
    const int nType     = (int) getParameter (paramNoiseShift)->getUserValue();

    int done = 0;
    runUntil (done, buffer, 0);
    
    int pos = 0;
    MidiMessage msg;
    MidiBuffer::Iterator itr (midi);
    while (itr.getNextEvent (msg, pos))
    {
        runUntil (done, buffer, pos);
        
        if (msg.isNoteOn())
        {
            noteQueue.add (msg.getNoteNumber());
            velocity = msg.getVelocity();
        }
        else if (msg.isNoteOff())
        {
            noteQueue.removeFirstMatchingValue (msg.getNoteNumber());
            
        }
        else if (msg.isAllNotesOff())
        {
            noteQueue.clear();
        }
        
        const int curNote = noteQueue.size() > 0 ? noteQueue.getFirst() : -1;
        
        blip_time_t time = 0;
        
        
         if (channelInfo[0].dirty)
         {
             int v = channelInfo[0].velocity;
             int curNote = channelInfo[0].note;
             
         }
        
        if (curNote != lastNote)
        {
            int v = curNote == -1 ? 0 : velocity;
            
            // Noise
            if (curNote != -1)
            {
            }
            
            lastNote = curNote;
        }
    }
    
    runUntil (done, buffer, buffer.getNumSamples());
    
    float* data = buffer.getWritePointer (0);
    
    if (editor)
        editor->scope.addSamples (data, buffer.getNumSamples());
}

//==============================================================================
bool PAPUAudioProcessor::hasEditor() const
{
    return true;
}

AudioProcessorEditor* PAPUAudioProcessor::createEditor()
{
    editor = new PAPUAudioProcessorEditor (*this);
    return editor;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PAPUAudioProcessor();
}
