/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "gb_apu/Gb_Apu.h"
#include "gb_apu/Multi_Buffer.h"

//==============================================================================
class PAPUAudioProcessor;
class PAPUEngine
{
public:
    PAPUEngine (PAPUAudioProcessor& p);

    void prepareToPlay (double sampleRate);
    void processBlock (AudioSampleBuffer& buffer, MidiBuffer& midi);

    void prepareBlock (AudioSampleBuffer& buffer);
    void handleMessage (const MidiMessage& msg);
    void runUntil (int& done, AudioSampleBuffer& buffer, int pos);

    int getNote()   { return lastNote; }

private:
    int parameterIntValue (const String& uid);
    void runOscs (int curNote, bool trigger);

    PAPUAudioProcessor& processor;

    int lastNote = -1;
    double pitchBend = 0;
    Array<int> noteQueue;
    float freq1 = 0.0f, freq2 = 0.0f;

    Gb_Apu apu;
    Stereo_Buffer buf;

    blip_time_t time = 0;

    blip_time_t clock() { return time += 4; }

    void writeReg (int reg, int value, bool force);

    std::map<int, int> regCache;
};

//==============================================================================
/**
*/
class PAPUAudioProcessorEditor;
class PAPUAudioProcessor : public gin::GinProcessor
{
public:
    //==============================================================================
    PAPUAudioProcessor();
    ~PAPUAudioProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    static String paramPulse1OL;
    static String paramPulse1OR;
    static String paramPulse1Duty;
    static String paramPulse1A;
    static String paramPulse1R;
    static String paramPulse1Tune;
    static String paramPulse1Fine;
    static String paramPulse1Sweep;
    static String paramPulse1Shift;
    static String paramPulse2OL;
    static String paramPulse2OR;
    static String paramPulse2Duty;
    static String paramPulse2A;
    static String paramPulse2R;
    static String paramPulse2Tune;
    static String paramPulse2Fine;
    static String paramNoiseOL;
    static String paramNoiseOR;
    static String paramNoiseShift;
    static String paramNoiseStep;
    static String paramNoiseRatio;
    static String paramNoiseA;
    static String paramNoiseR;
    static String paramOutput;
    static String paramVoices;
    
    gin::AudioFifo fifo {1, 44100};
    
private:
    void runUntil (int& done, AudioSampleBuffer& buffer, int pos);
    PAPUEngine* findFreeVoice();
    PAPUEngine* findVoiceForNote (int note);
    
    OwnedArray<PAPUEngine> papus;
    int nextVoice = 0;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PAPUAudioProcessor)
};

